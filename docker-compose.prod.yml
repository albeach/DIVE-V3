version: '3.8'

# ============================================
# DIVE V3 - Production Docker Compose (Phase 3)
# ============================================
# Usage: docker-compose -f docker-compose.prod.yml up -d
# 
# Features:
# - Multi-stage builds for smaller images
# - Non-root users for security
# - Resource limits
# - Health checks
# - Restart policies
# - Read-only filesystems where possible

services:
  # ============================================
  # Backend API Service
  # ============================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    image: dive-v3-backend:${VERSION:-latest}
    container_name: dive-v3-backend-prod
    restart: unless-stopped
    
    environment:
      - NODE_ENV=production
    
    env_file:
      - ./backend/.env.production
    
    ports:
      - "4000:4000"
    
    depends_on:
      mongodb:
        condition: service_healthy
      opa:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    
    networks:
      - dive-v3-network
    
    volumes:
      - backend-logs:/var/log/dive-v3
      - backend-temp:/tmp
    
    security_opt:
      - no-new-privileges:true
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================
  # Frontend Service (Next.js)
  # ============================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    image: dive-v3-frontend:${VERSION:-latest}
    container_name: dive-v3-frontend-prod
    restart: unless-stopped
    
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
    
    env_file:
      - ./frontend/.env.production
    
    ports:
      - "3000:3000"
    
    depends_on:
      backend:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    
    networks:
      - dive-v3-network
    
    security_opt:
      - no-new-privileges:true
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================
  # MongoDB (Primary + Replica for HA)
  # ============================================
  mongodb:
    image: mongo:7.0
    container_name: dive-v3-mongodb-prod
    restart: unless-stopped
    
    command: mongod --replSet rs0 --bind_ip_all
    
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_ROOT_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_ROOT_PASSWORD:-changeme}
      - MONGO_INITDB_DATABASE=dive-v3
    
    ports:
      - "27017:27017"
    
    volumes:
      - mongodb-data:/data/db
      - mongodb-config:/data/configdb
      - ./scripts/mongo-init.sh:/docker-entrypoint-initdb.d/mongo-init.sh:ro
    
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    
    networks:
      - dive-v3-network
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================
  # OPA (Open Policy Agent)
  # ============================================
  opa:
    image: openpolicyagent/opa:0.68.0-rootless
    container_name: dive-v3-opa-prod
    restart: unless-stopped
    
    command:
      - "run"
      - "--server"
      - "--addr=0.0.0.0:8181"
      - "--log-level=info"
      - "--log-format=json"
      - "/policies"
    
    ports:
      - "8181:8181"
    
    volumes:
      - ./policies:/policies:ro
    
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8181/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    
    networks:
      - dive-v3-network
    
    security_opt:
      - no-new-privileges:true
    
    read_only: true
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================
  # Keycloak (Identity Provider Broker)
  # ============================================
  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    container_name: dive-v3-keycloak-prod
    restart: unless-stopped
    
    command:
      - "start"
      - "--optimized"
      - "--hostname-strict=false"
      - "--proxy=edge"
    
    environment:
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://keycloak-postgres:5432/keycloak
      - KC_DB_USERNAME=${KC_DB_USERNAME:-keycloak}
      - KC_DB_PASSWORD=${KC_DB_PASSWORD:-changeme}
      - KC_HOSTNAME=${KC_HOSTNAME:-localhost}
      - KC_HTTP_ENABLED=true
      - KC_HEALTH_ENABLED=true
      - KC_METRICS_ENABLED=true
      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN:-admin}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD:-changeme}
    
    ports:
      - "8081:8080"
      - "8443:8443"
    
    depends_on:
      keycloak-postgres:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    
    networks:
      - dive-v3-network
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================
  # Keycloak PostgreSQL Database
  # ============================================
  keycloak-postgres:
    image: postgres:15-alpine
    container_name: dive-v3-keycloak-db-prod
    restart: unless-stopped
    
    environment:
      - POSTGRES_DB=keycloak
      - POSTGRES_USER=${KC_DB_USERNAME:-keycloak}
      - POSTGRES_PASSWORD=${KC_DB_PASSWORD:-changeme}
    
    volumes:
      - keycloak-postgres-data:/var/lib/postgresql/data
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak"]
      interval: 10s
      timeout: 5s
      retries: 5
    
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    networks:
      - dive-v3-network
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================
  # KAS (Key Access Service) - Optional
  # ============================================
  kas:
    build:
      context: ./kas
      dockerfile: Dockerfile
      target: production
    image: dive-v3-kas:${VERSION:-latest}
    container_name: dive-v3-kas-prod
    restart: unless-stopped
    profiles:
      - kas
    
    environment:
      - NODE_ENV=production
    
    env_file:
      - ./kas/.env.production
    
    ports:
      - "8080:8080"
    
    depends_on:
      opa:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    
    networks:
      - dive-v3-network
    
    security_opt:
      - no-new-privileges:true
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================
  # Nginx Reverse Proxy (Optional)
  # ============================================
  nginx:
    image: nginx:alpine
    container_name: dive-v3-nginx-prod
    restart: unless-stopped
    profiles:
      - nginx
    
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
    
    depends_on:
      - frontend
      - backend
    
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 256M
        reservations:
          cpus: '0.5'
          memory: 128M
    
    networks:
      - dive-v3-network
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# ============================================
# Networks
# ============================================
networks:
  dive-v3-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ============================================
# Volumes
# ============================================
volumes:
  mongodb-data:
    driver: local
    driver_opts:
      type: none
      device: /data/dive-v3/mongodb
      o: bind
  
  mongodb-config:
    driver: local
  
  keycloak-postgres-data:
    driver: local
    driver_opts:
      type: none
      device: /data/dive-v3/keycloak-db
      o: bind
  
  backend-logs:
    driver: local
    driver_opts:
      type: none
      device: /var/log/dive-v3/backend
      o: bind
  
  backend-temp:
    driver: local
  
  nginx-cache:
    driver: local

