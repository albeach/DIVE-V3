# Comprehensive CI/CD Pipeline for DIVE V3
# Runs all builds, tests, and quality checks across all services
# Note: backend-tests.yml provides faster feedback for backend-only changes
name: DIVE V3 CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Job 1: Backend TypeScript Build & Lint
  backend-build:
    name: Backend Build & TypeScript
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./backend
        run: npm ci
      
      - name: TypeScript compilation check
        working-directory: ./backend
        run: npx tsc --noEmit
      
      - name: Build backend
        working-directory: ./backend
        run: npm run build
      
      - name: Upload backend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-dist
          path: backend/dist

  # Job 2: Frontend TypeScript Build
  frontend-build:
    name: Frontend Build & TypeScript
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci --legacy-peer-deps
      
      - name: TypeScript compilation check
        working-directory: ./frontend
        run: npx tsc --noEmit
      
      - name: Build frontend
        working-directory: ./frontend
        run: npm run build --legacy-peer-deps || npm run build
        env:
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: test-secret-for-ci-build-only-not-production
          KEYCLOAK_CLIENT_ID: dive-v3-client
          KEYCLOAK_CLIENT_SECRET: test-secret-for-ci
          KEYCLOAK_ISSUER: http://localhost:8081/realms/dive-v3-pilot
          NEXT_PUBLIC_BACKEND_URL: http://localhost:4000

  # Job 3: KAS TypeScript Build
  kas-build:
    name: KAS Build & TypeScript
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: kas/package-lock.json
      
      - name: Install dependencies
        working-directory: ./kas
        run: npm ci
      
      - name: TypeScript compilation check
        working-directory: ./kas
        run: npx tsc --noEmit
      
      - name: Build KAS
        working-directory: ./kas
        run: npm run build

  # Job 3b: KAS Unit Tests
  kas-tests:
    name: KAS Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: kas/package-lock.json
      
      - name: Install dependencies
        working-directory: ./kas
        run: npm ci
      
      - name: Run KAS tests
        working-directory: ./kas
        run: npm test
        env:
          NODE_ENV: test
          CI: true
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: kas-test-results
          path: kas/coverage/
          retention-days: 30

  # Job 4: Phase 1 Validation Tests (NEW)
  phase1-validation-tests:
    name: Phase 1 - IdP Validation Tests
    runs-on: ubuntu-latest
    needs: [backend-build]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./backend
        run: npm ci
      
      - name: Run Phase 1 Validation Tests
        working-directory: ./backend
        run: npm test -- idp-validation.test.ts --coverage
        env:
          NODE_ENV: test
          CI: true
      
      - name: Verify 100% Pass Rate
        working-directory: ./backend
        run: |
          echo "Validating 22/22 tests passed..."
          npm test -- idp-validation.test.ts --silent | grep "Tests:.*22 passed"
      
      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        with:
          name: phase1-validation-coverage
          path: backend/coverage/
          retention-days: 30

  # Job 5: Backend Tests with MongoDB
  backend-tests:
    name: Backend Unit & Integration Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./backend
        run: npm ci
      
      - name: Run backend tests with coverage
        working-directory: ./backend
        run: npm run test:ci
        env:
          NODE_ENV: test
          CI: true
          MONGODB_URL: mongodb://localhost:27017
          MONGODB_DATABASE: dive-v3-test
        continue-on-error: true
      
      - name: Upload coverage to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/coverage

  # Job 5: OPA Policy Tests
  opa-tests:
    name: OPA Policy Tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup OPA
        uses: open-policy-agent/setup-opa@v2
        with:
          version: '0.68.0'
      
      - name: Run OPA policy tests
        run: opa test policies/ -v
      
      - name: Verify test coverage
        run: |
          RESULT=$(opa test policies/ | grep "PASS")
          echo "$RESULT"
          # Extract pass count (expect 126+ passing tests - Week 3.3: 106 existing + 20 admin)
          PASSED=$(echo "$RESULT" | grep -oP 'PASS: \K\d+' || echo "0")
          echo "Tests passed: $PASSED"
          if [ "$PASSED" -lt 126 ]; then
            echo "❌ Test coverage below threshold (126+ required, got $PASSED)"
            exit 1
          fi
          echo "✅ Test coverage met: $PASSED/126 tests passing"

  # Job 6: ZTDF Migration Validation
  ztdf-validation:
    name: ZTDF Migration Dry-Run
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./backend
        run: npm ci
      
      - name: Seed test resources
        working-directory: ./backend
        run: npx ts-node src/scripts/seed-resources.ts
        env:
          MONGODB_URL: mongodb://localhost:27017
          MONGODB_DATABASE: dive-v3
      
      - name: Run ZTDF migration (dry-run)
        working-directory: ./backend
        run: npx ts-node src/scripts/migrate-to-ztdf.ts --dry-run
        env:
          MONGODB_URL: mongodb://localhost:27017
          MONGODB_DATABASE: dive-v3
      
      - name: Seed ZTDF resources for validation
        working-directory: ./backend
        run: npx tsx src/scripts/seed-ztdf-resources.ts
        env:
          MONGODB_URL: mongodb://localhost:27017
          MONGODB_DATABASE: dive-v3
      
      - name: Validate ZTDF integrity
        working-directory: ./backend
        run: |
          echo "Verifying ZTDF resources have valid integrity hashes..."
          npm run test -- ztdf.utils.test.ts --testNamePattern="validateZTDFIntegrity"
        env:
          NODE_ENV: test
          MONGODB_URL: mongodb://localhost:27017
          MONGODB_DATABASE: dive-v3

  # Job 7: Security & Quality Checks
  security-checks:
    name: Security & Quality
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Run security audit (backend)
        working-directory: ./backend
        run: npm audit --audit-level=high || true
      
      - name: Run security audit (frontend)
        working-directory: ./frontend
        run: npm audit --audit-level=high || true
      
      - name: Run security audit (KAS)
        working-directory: ./kas
        run: npm audit --audit-level=high || true
      
      - name: Check for secrets in code
        run: |
          # Simple check for common secret patterns
          if grep -r -i "password.*=.*['\"]" --include="*.ts" --include="*.js" backend/ frontend/ kas/ 2>/dev/null; then
            echo "⚠️ Warning: Possible hardcoded secrets found"
          fi
          echo "✅ Secret scan complete"

  # Summary Job
  ci-summary:
    name: CI/CD Summary
    runs-on: ubuntu-latest
    needs: [backend-build, backend-tests, phase1-validation-tests, frontend-build, kas-build, kas-tests, opa-tests, ztdf-validation, security-checks]
    if: always()
    
    steps:
      - name: CI/CD Status
        run: |
          echo "============================================"
          echo "DIVE V3 CI/CD Summary"
          echo "============================================"
          echo "Backend Build: ${{ needs.backend-build.result }}"
          echo "Backend Tests: ${{ needs.backend-tests.result }}"
          echo "Phase 1 Validation Tests: ${{ needs.phase1-validation-tests.result }}"
          echo "Frontend Build: ${{ needs.frontend-build.result }}"
          echo "KAS Build: ${{ needs.kas-build.result }}"
          echo "KAS Tests: ${{ needs.kas-tests.result }}"
          echo "OPA Tests: ${{ needs.opa-tests.result }}"
          echo "ZTDF Validation: ${{ needs.ztdf-validation.result }}"
          echo "Security Checks: ${{ needs.security-checks.result }}"
          echo "============================================"
          
          # backend-tests can have failures during development (continue-on-error: true)
          # All other jobs must pass (including Phase 1 validation tests)
          if [ "${{ needs.backend-build.result }}" != "success" ] || \
             [ "${{ needs.phase1-validation-tests.result }}" != "success" ] || \
             [ "${{ needs.frontend-build.result }}" != "success" ] || \
             [ "${{ needs.kas-build.result }}" != "success" ] || \
             [ "${{ needs.kas-tests.result }}" != "success" ] || \
             [ "${{ needs.opa-tests.result }}" != "success" ]; then
            echo "❌ Critical CI/CD checks failed"
            exit 1
          fi
          
          echo "✅ All critical checks passed"
          echo "Backend tests: ${{ needs.backend-tests.result }} (may have failures during development)"
          echo "Note: Week 3.4.3 KAS Flow tests: 18 new tests added"
