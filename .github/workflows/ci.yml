name: DIVE V3 CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Job 1: Backend TypeScript Build & Lint
  backend-build:
    name: Backend Build & TypeScript
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./backend
        run: npm ci
      
      - name: TypeScript compilation check
        working-directory: ./backend
        run: npx tsc --noEmit
      
      - name: Build backend
        working-directory: ./backend
        run: npm run build
      
      - name: Upload backend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-dist
          path: backend/dist

  # Job 2: Frontend TypeScript Build
  frontend-build:
    name: Frontend Build & TypeScript
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: TypeScript compilation check
        working-directory: ./frontend
        run: npx tsc --noEmit
      
      - name: Build frontend
        working-directory: ./frontend
        run: npm run build
        env:
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: test-secret-for-ci
          KEYCLOAK_CLIENT_ID: dive-v3-client
          KEYCLOAK_CLIENT_SECRET: test-secret
          KEYCLOAK_ISSUER: http://localhost:8081/realms/dive-v3-pilot
          NEXT_PUBLIC_BACKEND_URL: http://localhost:4000

  # Job 3: KAS TypeScript Build
  kas-build:
    name: KAS Build & TypeScript
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: kas/package-lock.json
      
      - name: Install dependencies
        working-directory: ./kas
        run: npm ci
      
      - name: TypeScript compilation check
        working-directory: ./kas
        run: npx tsc --noEmit
      
      - name: Build KAS
        working-directory: ./kas
        run: npm run build

  # Job 4: OPA Policy Tests
  opa-tests:
    name: OPA Policy Tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup OPA
        uses: open-policy-agent/setup-opa@v2
        with:
          version: '0.68.0'
      
      - name: Run OPA policy tests
        run: opa test policies/ -v
      
      - name: Verify test coverage
        run: |
          RESULT=$(opa test policies/ | grep "PASS")
          echo "$RESULT"
          # Extract pass count (expect 84+ passing tests)
          PASSED=$(echo "$RESULT" | grep -oP 'PASS: \K\d+' || echo "0")
          echo "Tests passed: $PASSED"
          if [ "$PASSED" -lt 84 ]; then
            echo "❌ Test coverage below threshold (84+ required, got $PASSED)"
            exit 1
          fi
          echo "✅ Test coverage met: $PASSED/87 tests passing"

  # Job 5: ZTDF Migration Validation
  ztdf-validation:
    name: ZTDF Migration Dry-Run
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./backend
        run: npm ci
      
      - name: Seed test resources
        working-directory: ./backend
        run: npx ts-node src/scripts/seed-resources.ts
        env:
          MONGODB_URL: mongodb://localhost:27017
          MONGODB_DATABASE: dive-v3
      
      - name: Run ZTDF migration (dry-run)
        working-directory: ./backend
        run: npx ts-node src/scripts/migrate-to-ztdf.ts --dry-run
        env:
          MONGODB_URL: mongodb://localhost:27017
          MONGODB_DATABASE: dive-v3

  # Job 6: Security & Quality Checks
  security-checks:
    name: Security & Quality
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Run security audit (backend)
        working-directory: ./backend
        run: npm audit --audit-level=high || true
      
      - name: Run security audit (frontend)
        working-directory: ./frontend
        run: npm audit --audit-level=high || true
      
      - name: Run security audit (KAS)
        working-directory: ./kas
        run: npm audit --audit-level=high || true
      
      - name: Check for secrets in code
        run: |
          # Simple check for common secret patterns
          if grep -r -i "password.*=.*['\"]" --include="*.ts" --include="*.js" backend/ frontend/ kas/ 2>/dev/null; then
            echo "⚠️ Warning: Possible hardcoded secrets found"
          fi
          echo "✅ Secret scan complete"

  # Summary Job
  ci-summary:
    name: CI/CD Summary
    runs-on: ubuntu-latest
    needs: [backend-build, frontend-build, kas-build, opa-tests, ztdf-validation, security-checks]
    if: always()
    
    steps:
      - name: CI/CD Status
        run: |
          echo "============================================"
          echo "DIVE V3 CI/CD Summary"
          echo "============================================"
          echo "Backend Build: ${{ needs.backend-build.result }}"
          echo "Frontend Build: ${{ needs.frontend-build.result }}"
          echo "KAS Build: ${{ needs.kas-build.result }}"
          echo "OPA Tests: ${{ needs.opa-tests.result }}"
          echo "ZTDF Validation: ${{ needs.ztdf-validation.result }}"
          echo "Security Checks: ${{ needs.security-checks.result }}"
          echo "============================================"
          
          if [ "${{ needs.backend-build.result }}" != "success" ] || \
             [ "${{ needs.frontend-build.result }}" != "success" ] || \
             [ "${{ needs.kas-build.result }}" != "success" ] || \
             [ "${{ needs.opa-tests.result }}" != "success" ]; then
            echo "❌ CI/CD Failed"
            exit 1
          fi
          
          echo "✅ All critical checks passed"
